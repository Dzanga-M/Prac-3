#!/usr/bin/python3
# Import libraries
import RPi.GPIO as GPIO
import random
import ES2EEPROMUtils
import os
import time


# some global variables that need to change as we run the program
end_of_game = None # set if the user wins or ends the game
player_number = 0 # User guess Number
guesses = 0  # User guesses
value = 0   # The secret guess number
player_name = ""  # Name of player
pwm_led = None
pwm_buzz = None

# DEFINE THE PINS USED HERE
LED_value = [11, 13, 15]
LED_accuracy = 32
buzzer = 33
btn_submit = 16
btn_increase = 18

eeprom = ES2EEPROMUtils.ES2EEPROM()


# Print the game banner
def welcome():
    
    os.system('clear')

    print("  _   _                 _                  _____ _            __  __ _")
    print("| \ | |               | |                / ____| |          / _|/ _| |")
    print("|  \| |_   _ _ __ ___ | |__   ___ _ __  | (___ | |__  _   _| |_| |_| | ___ ")
    print("| . ` | | | | '_ ` _ \| '_ \ / _ \ '__|  \___ \| '_ \| | | |  _|  _| |/ _ \\")
    print("| |\  | |_| | | | | | | |_) |  __/ |     ____) | | | | |_| | | | | | |  __/")
    print("|_| \_|\__,_|_| |_| |_|_.__/ \___|_|    |_____/|_| |_|\__,_|_| |_| |_|\___|")
    print("")
    print("Guess the number and immortalise your name in the High Score Hall of Fame!")


# Print the game menu
def menu():
    global end_of_game, player_number, value, guesses
    guesses = 1
    player_number = generate_number() #for player
    option = input("Select an option:   H - View High Scores     P - Play Game       Q - Quit\n")
    option = option.upper()
    if option == "H":
        os.system('clear')
        print("HIGH SCORES!!")
        s_count, ss = fetch_scores()
        display_scores(s_count, ss)
    elif option == "P":
        os.system('clear')
        print("Starting a new round!")
        print("Use the buttons on the Pi to make and submit your guess!")
        print("Press and hold the guess button to cancel your game")
        value = generate_number() # Get secret number
        while not end_of_game:
            if end_of_game is True:
                break
    elif option == "Q":
        print("Come back soon!")
        exit()
    else:
        print("Invalid option. Please select a valid one!")


def display_scores(count, raw_data):
    # print the scores to the screen in the expected format
    print("There are {} scores. Here are the top 3!".format(count))
    # print out the scores in the required format
    raw_data.sort(key=lambda x: x[1])
    if len(raw_data) <= 3:
        for i in range(1,len(raw_data)+1):
            print(i,"-",raw_data[i-1][0],"took",raw_data[i-1][1],"guesses")
    else:
        for i in range(1,4):
            print(i,"-",raw_data[i-1][0],"took",raw_data[i-1][1],"guesses")

    


# Setup Pins
def setup():
    global pwm_led, pwm_buzz

    # Setup board mode
    GPIO.setmode(GPIO.BOARD)

    # Setup regular GPIO
    for i in LED_value:
      GPIO.setup(i,GPIO.OUT)
      GPIO.output(i, False)
      
    GPIO.setup(LED_accuracy,GPIO.OUT)
    GPIO.setup(buzzer,GPIO.OUT)
    GPIO.setup(btn_submit, GPIO.IN, pull_up_down=GPIO.PUD_UP)
    GPIO.setup(btn_increase, GPIO.IN, pull_up_down=GPIO.PUD_UP)
    # Setup PWM channels
    pwm_led = GPIO.PWM(LED_accuracy, 1000)
    pwm_buzz = GPIO.PWM(buzzer, 10)
    GPIO.setwarnings(False)
    # eeprom.populate_mock_scores()
    # Setup debouncing and callbacks
    GPIO.add_event_detect(btn_increase, GPIO.FALLING, callback=btn_increase_pressed, bouncetime=300)
    GPIO.add_event_detect(btn_submit, GPIO.FALLING, callback=btn_guess_pressed, bouncetime=300)
    
    


# Load high scores
def fetch_scores():
    
    # get however many scores there are
    counter = eeprom.read_block(0, 1)
    score_count = counter[0]

    # Get the scores
    eeprom_scores = []
    for i in range(1, score_count+1):
       eeprom_scores .append(eeprom.read_block(i, 4))
    
    # convert the codes back to ascii
    scores = []
    for single in eeprom_scores :
        player_name = ""
        info_scores = []
        for i in range(len(single)-1):   # Converts Name of player
            player_name+=chr(single[i])    
        info_scores.append(player_name)
        info_scores.append(single[len(single)-1])
        # Get the scores in ascii
        scores.append(info_scores)
    # return back the results
    return score_count, scores


# Save high scores
def save_scores(info):
    # fetch scores
    counts, array = fetch_scores()

    # include new score
    array.append(info)
    
    # write new scores
    write_scores(array)


# Writes scores in EEPROM
def write_scores(scores):
        eeprom.write_block(0, [len(scores)])
        scores.sort(key=lambda x: x[1])
        for i, score in enumerate(scores):
            data_to_write = []
            # get the string
            for letter in score[0]:
                data_to_write.append(ord(letter))
            data_to_write.append(score[1])
            eeprom.write_block(i+1, data_to_write)     


# Generate guess number
def generate_number():
    return random.randint(0, pow(2, 3)-1)


# Increase button pressed
def btn_increase_pressed(channel):

    # You can choose to have a global variable store the user's current guess, 
    global player_number

    # Change Guess Number to binary array
    if (player_number<8):
        save = bin(player_number)
        
    else:
        player_number = 0
        save = bin(player_number)
    
    print("Your guess: ",player_number)
    # Increment the user's guess number
    player_number+=1  
                    
    # Increase the value shown on the LEDs
    if save[len(save)-1] =="1":
        GPIO.output(11, True)
    else:
        GPIO.output(11, False)

    if save[len(save)-2] =="1":
        GPIO.output(13, True)
    else:
        GPIO.output(13, False)

    if save[len(save)-3] =="1":
        GPIO.output(15, True)
    else:
        GPIO.output(15, False)
    
    

# Guess button
def btn_guess_pressed(channel): 
    global end_of_game, chances, player_number, value, pwm_buzz, pwm_led, guesses

    start = time.time()
    time.sleep(0.2)

    
    while GPIO.input(btn_submit) == GPIO.LOW:
        time.sleep(0.01)
    length = time.time() - start
    
    # If they've pressed and held the button, clear up the GPIO and take them back to the menu screen
    
    if length >1:
        guesses = 0
        Turn_off_pwm()
        Turn_off_led()
        welcome()
        end_of_game = True


    else:
        # Change the PWM LED    
        # if it's close enough, adjust the buzzer
        accuracy_leds()
        trigger_buzzer()

        # Compare the actual value with the user value displayed on the LEDs
        # if it's an exact guess:      
        if value == player_number:
            
            # Array for the name and guesses of the player
            player = []

            # - tell the user and prompt them for a name
            name = input("\nEnter your name: ")
         
            while len(name)<3:
                name = input("\nEnter your name: ")

            #Save Name and Guesses
            player.append(name)
            player.append(guesses)

            #Save scores in EEPROM
            save_scores(player)
            guesses = 0
            Turn_off_pwm()
            Turn_off_led()
            welcome()
            end_of_game = True
            
        else:
            guesses+=1

    

# Turn off LEDs       
def Turn_off_led():
    for i in LED_value:
        GPIO.output(i, False)

# Turn off LED_Accuracy and buzzer     
def Turn_off_pwm():
    GPIO.output(LED_accuracy, False)
    GPIO.output(buzzer, False)
    pwm_led.stop()
    pwm_buzz.stop()
    
      

# LED Brightness
def accuracy_leds():
    global pwm_led, value, player_number
    # Set the brightness of the LED based on how close the guess is to the answer
    GPIO.output(LED_accuracy, True)
    pwm_led.start(0)

    # - The % brightness should be directly proportional to the % "closeness"
    # - If they guessed 7, the brightness would be at ((8-7)/(8-6)*100 = 50%
    if player_number>value:
        pwm_led.ChangeDutyCycle((8-player_number)/(8-value)*100)  


    # - For example if the answer is 6 and a user guesses 4, the brightness should be at 4/6*100 = 66%  
    else:
        pwm_led.ChangeDutyCycle(player_number/value*100)
            
    

# Sound Buzzer
def trigger_buzzer():
    global pwm_buzz, value, player_number
    GPIO.output(33, True)
    # The buzzer operates differently from the LED
    # If the user is off by an absolute value of 3, the buzzer should sound once every second
    if abs(value-player_number)>=3:
        for i in range(1):
            pwm_buzz.start(0)
            pwm_buzz.ChangeDutyCycle(50)
            time.sleep(0.5)
            pwm_buzz.stop()
            time.sleep(0.5) 
        
    # If the user is off by an absolute value of 2, the buzzer should sound twice every second
    elif abs(value-player_number)<3 and abs(value-player_number)>1:
        for i in range(2):
            pwm_buzz.start(0)
            pwm_buzz.ChangeDutyCycle(50)
            time.sleep(0.25)
            pwm_buzz.stop()
            time.sleep(0.25)     
        
    # If the user is off by an absolute value of 1, the buzzer should sound 4 times a second loop(0.125)
    else:
        for i in range(4):
            pwm_buzz.start(0)
            pwm_buzz.ChangeDutyCycle(50)
            time.sleep(0.125)
            pwm_buzz.stop()
            time.sleep(0.125)      


if __name__ == "__main__":
    try:
        # Call setup function
        setup()
        welcome()
        while True:
            menu()
            
    except Exception as e:
        print(e)
    finally:
        GPIO.cleanup()
